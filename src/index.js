require("./main.css");
var htmlToImage = require('html-to-image');
const pica = require('pica');

function saveImage(dataUrl, name) {
    var link = document.createElement('a');
    link.href = dataUrl;
    link.download = name;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

document.getElementById("fileinput").addEventListener("change", (e) => {
    const fileList = e.target.files;

    if (fileList.length > 0) {
        const file = fileList[0];
        const reader = new FileReader();

        reader.onload = (event) => {
            const dataUrl = event.target.result;
            document.getElementById("image0_131_1632").setAttribute("xlink:href", dataUrl);
            preview(false);
        };

        reader.readAsDataURL(file);
    }
});
document.getElementById("export").addEventListener("click", () => {
    preview(true);
})


var node = document.getElementById('main');
var display = document.getElementById("display");
var displaysmall = document.getElementById("display-small");
function preview(save = false) {
    htmlToImage.toPng(node)
        .then(function (dataUrl) {
            display.src = dataUrl;
            if(save) saveImage(dataUrl, "banner@2x.png");
            // resize to 50% size

            display.onload = function () {
                // Use Pica directly to resize without manually creating a canvas
                const picaInstance = pica();

                // Use an output canvas, but let Pica manage it
                const outputCanvas = document.createElement('canvas');
                outputCanvas.width = 500;
                outputCanvas.height = 90;

                // Resize the image using Pica
                picaInstance.resize(display, outputCanvas)
                    .then(() => picaInstance.toBlob(outputCanvas, 'image/png', 0.9))
                    .then((blob) => {
                        const resizedImg = new Image();
                        resizedImg.src = URL.createObjectURL(blob);
                        displaysmall.src = resizedImg.src;
                        if(save) saveImage(resizedImg.src, "banner.png");
                    })
                    .catch(function (error) {
                        console.error('Oops, something went wrong during resizing!', error);
                    });
            };
        })
        .catch(function (error) {
            console.error('Oops, something went wrong!', error);
        });
}

const isFirefox = navigator.userAgent.toLowerCase().includes('firefox');
if(isFirefox) {
    alert("This site does not work on Firefox due to differences in rendering SVGs. If you continue, do NOT use any content generated by this.")
}